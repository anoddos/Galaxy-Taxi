@using GalaxyTaxi.Shared.Api.Models.AddressDetection;
@using GalaxyTaxi.Shared.Api.Models.EmployeeManagement;
@using GalaxyTaxi.Shared.Api.Models.OfficeManagement;
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Grpc.Core;
@inject IJSRuntime JSRuntime

<MudDialog DialogTitle="Edit Employee" Width="400px">
	<DialogContent>
		@if (showAlert)
		{
			<OperationResult Message="@alertMessage" AlertSeverity="@alertSeverity" OnAlertClosed="HandleAlertClosed" />
		}
		<MudForm @ref="form">
			<MudTextField Label="First Name" @bind-Value="Employee.FirstName" Required RequiredError="First Name is required" />
				<MudTextField Label="Last Name" @bind-Value="Employee.LastName" Required RequiredError="Last Name is required" />
				<MudTextField Label="Mobile" @bind-Value="Employee.Mobile" Required RequiredError="Mobile is required" />
				<MudTextField Label="From Address"
							  Value="@Employee.From.Name"
									  Required
							  RequiredError="From Address is required."
							  ValueChanged="@((string newValue) => OnFromAddressChanged(newValue))" />
				<MudButton Variant="Variant.Outlined" OnClick="AddMarker">Show Address Pin</MudButton>
				<div id="@MapElementId">
					<GoogleMap @ref="@map1" Options="@mapOptions"></GoogleMap>
				</div>


				<MudSelect T="OfficeInfo" Items="OfficeList" Label="Office" Style="width:400px;"
						   AnchorOrigin="Origin.BottomCenter" @bind-Value="SelectedOffice">
					@foreach (var office in OfficeList)
				{
					<MudSelectItem Value="@office">@office.Address.Name</MudSelectItem>
				}
			</MudSelect>
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Outlined" OnClick="SaveChanges">Save</MudButton>
		<MudButton Variant="Variant.Outlined" OnClick="CloseDialog">Cancel</MudButton>
	</DialogActions>
</MudDialog>

@code {
	MudForm form;

	[Parameter]
	public EmployeeJourneyInfo Employee { get; set; }

	[Parameter]
	public List<OfficeInfo> OfficeList { get; set; }

	[CascadingParameter]
	MudDialogInstance dialog { get; set; }

	private OfficeInfo SelectedOffice { get; set; }
	private GoogleMap map1;
	private MapOptions mapOptions;
	private Marker marker;

	private bool showAlert = false;
	private string alertMessage = "";
	private string MapElementId = "myGoogleMap";
	private Severity alertSeverity;

	protected override async void OnInitialized()
	{
		SelectedOffice = OfficeList.FirstOrDefault(office => office.OfficeId == Employee.To.OfficeId);
		mapOptions = new MapOptions()
			{
				Zoom = 13,
				Center = new LatLngLiteral()
				{
					Lat = (double)Employee.From.Latitude,
					Lng = (double)Employee.From.Longitude
				},
				MapTypeId = MapTypeId.Roadmap
			};
	}

	private async Task OnFromAddressChanged(string newValue)
	{
		Employee.From.Name = newValue;
		await AddMarker();
	}

	private async Task AddMarker()
	{
		Employee.From = string.IsNullOrWhiteSpace(Employee.From.Name) ? new AddressInfo()
																			: await _addressDetection.DetectAddressCoordinatesFromName(Employee.From);


		var position = Employee.From.IsDetected ? new LatLngLiteral { Lat = (double)Employee.From.Latitude, Lng = (double)Employee.From.Longitude }
												: new LatLngLiteral { Lat = 41.716667, Lng = 44.783333 };

		if (!Employee.From.IsDetected)
		{
			Employee.From.Name = "";
		}

		if (marker == null)
		{
			marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
				{
					Map = map1.InteropObject,
					Draggable = true
				});
		}
		await marker.SetPosition(position);



		await marker.AddListener("dragend", async () =>
		{
			var position = await marker.GetPosition();
			Employee.From.Longitude = position.Lng;
			Employee.From.Latitude = position.Lat;
			var detectedAddress = await _addressDetection.DetectAddressNameFromCoordinates(Employee.From);
			Employee.From.Name = detectedAddress.Name;
			StateHasChanged();
		});

	}
	private async Task SaveChanges()
	{
		if (!form.IsValid)
		{
			form.Validate();
			return;
		}

		try
		{
			Employee.To = SelectedOffice;
			await _employeeManagement.EditEmployeeDetails(Employee);
			alertMessage = "Employee Details Updated";
			alertSeverity = Severity.Success;
			dialog.Close(DialogResult.Ok(true));
		}
		catch (RpcException ex)
		{
			alertMessage = ex.Status.Detail;
			alertSeverity = Severity.Error;
		}

		showAlert = true;
		StateHasChanged();

	}

	private void CloseDialog()
	{
		dialog.Close(DialogResult.Ok(true));
	}

	private void HandleAlertClosed()
	{
		showAlert = false;
		StateHasChanged();
	}
}
