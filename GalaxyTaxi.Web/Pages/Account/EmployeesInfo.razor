@page "/account/employeesInfo"
@using System.Net.Http.Json
@using GalaxyTaxi.Shared.Api.Models.EmployeeManagement

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" style="width: 100%;">
    <MudTabPanel Text="All">
        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Current">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Planned">
        <MudText>Content Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Cancelled">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
</MudTabs>


<MudDataGrid T="EmployeeJourneyInfo" MultiSelection="true" Items="@_employees"
             SortMode="SortMode.Multiple" Filterable="true" Hideable="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Employees</MudText>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="EmployeeJourneyInfo" />
        <PropertyColumn  Property="x => x.FirstName" Title="First Name"/>
        <PropertyColumn Property="x => x.LastName" Title="Last Name"/>
        <PropertyColumn Property="x => x.From" Title="From" />
        <PropertyColumn Property="x => x.To" Title="To"/>
        <PropertyColumn Property="x => x.Mobile" Title="Mobile" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeJourneyInfo" />
    </PagerContent>

</MudDataGrid>

@*<div class="d-flex flex-wrap mt-4">
    <MudSwitch  Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>*@

@*<MudExpansionPanels Style="flex:1">*@
@*    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>*@
@*</MudExpansionPanels*@

@*
@code {
    private IEnumerable<EmployeeJourneyInfo> employees = new List<EmployeeJourneyInfo>();
    //private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<EmployeeJourneyInfo, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FirstName.Length;
        else
            return x.FirstName;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<EmployeeJourneyInfo, bool> _quickFilter => x =>
    {
        //if (string.IsNullOrWhiteSpace(_searchString))
        //    return true;

        //if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        //if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        //if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
        //    return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        EmployeeJourneyInfo = await httpClient.GetFromJsonAsync<List<EmployeeJourneyInfo>>("webapi/periodictable");
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<EmployeeJourneyInfo> args)
    {
        //_events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<EmployeeJourneyInfo> items)
    {
        //_events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}*@
