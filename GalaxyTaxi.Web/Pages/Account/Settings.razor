@page "/account/settings"
@using GalaxyTaxi.Shared.Api.Models.AccountSettings;
@using Grpc.Core;
@using MudBlazor

<MudContainer>
    <MudCard Class="settings-card">
        <MudCardContent>
                 @if(showAlert)
                {
                    <OperationResult Message="@alertMessage" AlertSeverity="@alertSeverity" OnAlertClosed="HandleAlertClosed" />
                }
                <MudTextField @bind-Value="oldPassword" 
                              OnBlur="ValidatePasswords" 
                              Label="Old Password" 
                              Variant="Variant.Filled" 
                              InputType="@OldPasswordInput" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="@oldPasswordIcon" 
                              OnAdornmentClick="ToggleOldPasswordVisibility" 
                              AdornmentAriaLabel="Show Password"
                              Error="@(!string.IsNullOrEmpty(OldPasswordValidation))"
                              ErrorText="@OldPasswordValidation" />

                <MudTextField @bind-Value="newPassword" 
                              OnBlur="ValidatePasswords" 
                              Label="New Password" 
                              Variant="Variant.Filled" 
                              InputType="@NewPasswordInput" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="@newPasswordIcon" 
                              OnAdornmentClick="ToggleNewPasswordVisibility" 
                              AdornmentAriaLabel="Show Password"
                              Error="@(!string.IsNullOrEmpty(NewPasswordValidation))"
                              ErrorText="@NewPasswordValidation" />

                <MudTextField @bind-Value="confirmPassword" 
                              Label="Confirm Password" 
                              Variant="Variant.Filled" 
                              InputType="@ConfirmPasswordInput" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="@confirmPasswordIcon" 
                              OnAdornmentClick="ToggleConfirmPasswordVisibility" 
                              AdornmentAriaLabel="Show Password"
                              Error="@(!passwordsMatch || !string.IsNullOrEmpty(ConfirmPasswordValidation))"
                              ErrorText="@(passwordsMatch ? ConfirmPasswordValidation : "Passwords do not match")" />



                <MudTextField Label="Email" Variant="Variant.Outlined" Type="InputType.Email" @bind-Value="accountSettings.Email" />


                <MudTextField Label="Company Name" Variant="Variant.Outlined" @bind-Value="accountSettings.CompanyName" />

                @if (accountSettings.IsCustomerCompany)
                {
                    <MudNumericField @bind-Value="accountSettings.MaxAmountPerEmployee" Label="Max Amount Per Employee (GEL)" Variant="Variant.Outlined" Min="0.0" />
                }
        </MudCardContent>
        <MudCardActions>
				<MudButton OnClick="SaveChanges" 
                           Disabled="!passwordsMatch || IsAnyPasswordFilled && (string.IsNullOrWhiteSpace(oldPassword) || string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))" 
                           Variant="Variant.Filled" 
                           Color="Color.Primary">Save Office Info</MudButton>

		</MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Inject] 
    public IDialogService DialogService { get; set; }
    private string oldPassword { get; set; } = "";
    private string newPassword { get; set; } = "";
    private string confirmPassword { get; set; } = "";
    private bool passwordsMatch => newPassword == confirmPassword;
    private IDialogReference dialogReference;


    private bool oldPasswordVisible = false;
    private bool newPasswordVisible = false;
    private bool confirmPasswordVisible = false;

    private string oldPasswordIcon = Icons.Material.Filled.Visibility;
    private string newPasswordIcon = Icons.Material.Filled.Visibility;
    private string confirmPasswordIcon = Icons.Material.Filled.Visibility;

    private InputType OldPasswordInput => oldPasswordVisible ? InputType.Text : InputType.Password;
    private InputType NewPasswordInput => newPasswordVisible ? InputType.Text : InputType.Password;
    private InputType ConfirmPasswordInput => confirmPasswordVisible ? InputType.Text : InputType.Password;

    private AccountSettings accountSettings { get; set; } = new AccountSettings();

    private bool showAlert = false;
    private string alertMessage = "";
    private Severity alertSeverity;

    private string OldPasswordValidation => IsAnyPasswordFilled && string.IsNullOrWhiteSpace(oldPassword) 
                                      ? "Old Password is required." 
                                      : "";

    private string NewPasswordValidation => IsAnyPasswordFilled && string.IsNullOrWhiteSpace(newPassword) 
                                          ? "New Password is required." 
                                          : "";

    private string ConfirmPasswordValidation => IsAnyPasswordFilled && string.IsNullOrWhiteSpace(confirmPassword) 
                                              ? "Confirm Password is required." 
                                              : "";


    protected override async Task OnInitializedAsync()
    {
        var response = await _accountService.GetAccountSettings();
        if (response != null)
        {
            accountSettings = response;
        }
    }

    private void ToggleOldPasswordVisibility()
    {
        oldPasswordVisible = !oldPasswordVisible;
        oldPasswordIcon = oldPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    }

    private void ToggleNewPasswordVisibility()
    {
        newPasswordVisible = !newPasswordVisible;
        newPasswordIcon = newPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordVisible = !confirmPasswordVisible;
        confirmPasswordIcon = confirmPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    }

    private async Task SaveChanges()
    {
        try
        {
            await _accountService.UpdateAccountSettings(new UpdateAccountSettingsRequest { NewPassword = newPassword, OldPassword = oldPassword, AccountInformation = accountSettings });
            alertMessage = "Account Settings Updated";
            alertSeverity = Severity.Success;
        }
        catch(RpcException ex)
        {
            alertMessage = ex.Message;
            alertSeverity = Severity.Error;
        }

        showAlert = true;
        StateHasChanged();

    }
    private void HandleAlertClosed()
    {
        showAlert = false;
        StateHasChanged();
    }


    private string PasswordMatchValidation() => newPassword == confirmPassword ? "" : "Passwords do not match";
    private void ValidatePasswords() => StateHasChanged();
    private bool IsAnyPasswordFilled => !string.IsNullOrWhiteSpace(oldPassword) 
                                 || !string.IsNullOrWhiteSpace(newPassword) 
                                 || !string.IsNullOrWhiteSpace(confirmPassword);


}

<style>
    .settings-card {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

    .form-divider {
        margin-top: 20px;
        border-top: 1px solid #ccc;
        padding-top: 20px;
    }
    
</style>
