@page "/account/settings"
@using GalaxyTaxi.Shared.Api.Models.Common
@using System.ComponentModel.DataAnnotations;
@using System.Globalization;

<MudContainer>
    <MudCard Class="settings-card">
        <MudCardContent>
            @if (showAlert)
            {
                <OperationResult Message="@alertMessage" AlertSeverity="@alertSeverity" OnAlertClosed="HandleAlertClosed"/>
            }
            @if (accountSettings?.AccountType == AccountType.VendorCompany)
            {
                <div style="display: flex; align-items: center; width: 100%;">
                    @{
                        var textColor = accountSettings.Status == AccountStatus.Verified ? Color.Success : accountSettings.Status == AccountStatus.Pending ? Color.Warning : Color.Error;
                        var verificationText = AccountStatusMapping.StatusMapping[accountSettings.Status];
                        var verificationIcon = accountSettings.Status == AccountStatus.Verified ? Icons.Material.Filled.CheckCircle :
                            accountSettings.Status == AccountStatus.Pending ? Icons.Material.Filled.Warning : Icons.Material.Filled.ErrorOutline;
                    }

                    <MudIcon Icon="@verificationIcon" Color="@textColor" Style="margin-right: 10px;"/>
                    <MudText Typo="Typo.overline" Color="@textColor">@verificationText</MudText>

                    @if (accountSettings.Status != AccountStatus.Verified)
                    {
                        <div style="float: right; margin: 10px"> 
                            <InputFile OnChange="@OnUploadFiles" Multiple="true"/>
                        </div>
                    }
                </div>

                @if (accountSettings.VendorFiles != null)
                {
                    <MudList>
                        @foreach (var file in accountSettings.VendorFiles)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                                @file.Name
                            </MudListItem>
                        }
                    </MudList>
                }
            } else
            {
                @if (accountSettings != null && accountSettings.SubscriptionInfo != null && accountSettings?.SubscriptionInfo?.Status == SubscriptionStatus.InActive)
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Error">No subscription</MudText>
                }
                else if (accountSettings != null && accountSettings.SubscriptionInfo != null)
                {
                    <div style="display: flex; align-items: center; width: 100%;">
                        <MudText Typo="Typo.subtitle1" Style="margin-right: 10px;">
                            Subscription Type: @accountSettings.SubscriptionInfo.SubscriptionPlanType
                        </MudText>
                        <MudText Typo="Typo.subtitle1">
                            Price: @accountSettings.SubscriptionInfo.Price.ToString("C2", new CultureInfo("ka-GE"))
                        </MudText>
                    </div>
                }

            }

            <MudTextField Label="Email" Variant="Variant.Outlined" Type="InputType.Email" @bind-Value="accountSettings.Email"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>

            <MudTextField Label="Company Name" Variant="Variant.Outlined" @bind-Value="accountSettings.CompanyName"/>

            @if (accountSettings.AccountType == AccountType.CustomerCompany)
            {
                <MudNumericField @bind-Value="accountSettings.MaxAmountPerEmployee" Label="Max Amount Per Employee (GEL)" Variant="Variant.Outlined" Min="3.0"/>
            }

            <MudTextField @bind-Value="oldPassword"
                          OnBlur="ValidatePasswords"
                          Label="Old Password"
                          Variant="Variant.Filled"
                          InputType="@OldPasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@oldPasswordIcon"
                          OnAdornmentClick="ToggleOldPasswordVisibility"
                          AdornmentAriaLabel="Show Password"
                          Error="@(!string.IsNullOrEmpty(OldPasswordValidation))"
                          ErrorText="@OldPasswordValidation"/>

            <MudTextField @bind-Value="newPassword"
                          OnBlur="ValidatePasswords"
                          Label="New Password"
                          Variant="Variant.Filled"
                          InputType="@NewPasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@newPasswordIcon"
                          OnAdornmentClick="ToggleNewPasswordVisibility"
                          AdornmentAriaLabel="Show Password"
                          Error="@(!string.IsNullOrEmpty(NewPasswordValidation))"
                          ErrorText="@NewPasswordValidation"/>

            <MudTextField @bind-Value="confirmPassword"
                          Label="Confirm Password"
                          Variant="Variant.Filled"
                          InputType="@ConfirmPasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@confirmPasswordIcon"
                          OnAdornmentClick="ToggleConfirmPasswordVisibility"
                          AdornmentAriaLabel="Show Password"
                          Error="@(!passwordsMatch || !string.IsNullOrEmpty(ConfirmPasswordValidation))"
                          ErrorText="@(passwordsMatch ? ConfirmPasswordValidation : "Passwords do not match")"/>
            @if (accountSettings.AccountType == AccountType.CustomerCompany)
            {
                <MudSwitch @bind-Checked="accountSettings.SupportTwoWayJourneys" Label="Support Two-Way Journeys" Color="Color.Primary"/>
            }

        </MudCardContent>
        <MudCardActions Style="padding-left: 15px">
            <MudButton OnClick="SaveChanges"
                       Disabled="!passwordsMatch || IsAnyPasswordFilled && (string.IsNullOrWhiteSpace(oldPassword) || string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))"
                       Variant="Variant.Filled"
                       Color="Color.Primary">
                Save Office Info
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>


<style>
    .settings-card {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

    .form-divider {
        margin-top: 20px;
        border-top: 1px solid #ccc;
        padding-top: 20px;
    }
    
</style>