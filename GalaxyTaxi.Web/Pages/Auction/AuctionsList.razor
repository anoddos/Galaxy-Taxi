@page "/auction/AuctionsList"
@using GalaxyTaxi.Shared.Api.Interfaces
@using GalaxyTaxi.Shared.Api.Models.Auction
@using GalaxyTaxi.Shared.Api.Models.Filters
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using Size = MudBlazor.Size
@inject IAuctionService AuctionService
@inject NavigationManager NavigationManager

<div class="filters-container">
    <MudCheckBox @bind-Checked="@_auctionsFilter.IncludesMe" Label="Mine" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Checked="@_auctionsFilter.IsFinished" Label="Finished" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Checked="@_auctionsFilter.WonByMe" Label="Won By Me" Color="Color.Primary"></MudCheckBox>
    <MudButton OnClick="async () => await UpdateGrid()" Variant="Variant.Filled" Size="Size.Small" Style="background-color: royalblue; color:white; margin-left: 15px;">Search</MudButton>
</div>

<MudGrid>
    @if (_auctionItems != null)
    {
        @foreach (var item in _auctionItems)
        {
            <MudItem xs="12">
                <MudPaper Elevation="3" Padding="16px" Class="auction-item">
                    <div class="auction-item-row">
                        <div class="auction-item-map">
                            <GoogleMap @ref="@_map1" Options="@_mapOptions" Height="200px"></GoogleMap>
                        </div>
                        <div class="auction-item-details" title="@item.Title">
                            <h3>@item.Title</h3>
                            <ul class="locations-list">
                                @foreach (var location in item.Locations ?? new List<string>())
                                {
                                    <li class="location-item">@location</li>
                                }
                            </ul>
                            <p class="destination-location">
                                <i class="fas fa-map-pin destination-pin"></i> @item.FinalLocation
                            </p>
                        </div>
                        <div class="auction-item-price">
                            <p class="price">@item.Price</p>
                            <p class="bid-count">Bids: @item.BidCount</p>
                        </div>

                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Details" OnClick="@(() => NavigateToAuctionDetails(item.AuctionId))" />

                    </div>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">

<style>

.filters-container {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin: 50px;
}

.auction-item {
    margin: 0 50px;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
}

.auction-item-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px;
}

.auction-item-map {
    flex: 1;
    height: 200px !important;
    width: 200px;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
}

.auction-item-details {
    flex: 2;
    padding: 0 20px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: #333;
}

.h3 {
    font-size: 18px;
    color: #555;
    margin-top: 0;
}

.auction-item-price {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    padding-right: 20px;
}

.price {
    font-size: 18px;
    color: royalblue;
}

.bid-count {
    color: #777;
}

.locations-list {
    padding-left: 20px;
}

.location-item::before {
    content: "\2022";
    color: #888;  
    display: inline-block;
    width: 1em;
    margin-left: -1em; 
}

.destination-location {
    font-weight: bold;
    margin-top: 10px; 
}

.destination-pin {
    color: royalblue;
    font-size: 1.5em; 
    vertical-align: middle;
    margin-right: 5px; 
}
</style>

@code {

    private AuctionsFilter _auctionsFilter = new AuctionsFilter
    {
        IncludesMe = false,
        IsFinished = false,
        WonByMe = false
    };

    private List<AuctionItem> _auctionItems = new List<AuctionItem>();
    private GoogleMap _map1;
    private MapOptions _mapOptions;

    protected override async void OnInitialized()
    {
        _mapOptions = new MapOptions
        {
            Zoom = 13,
            Center = new LatLngLiteral
            {
                Lat = 40.333,
                Lng = 41.33
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private void NavigateToAuctionDetails(long auctionId)
    {
        NavigationManager.NavigateTo($"/auction/{auctionId}");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAuctionData();
    }

    private async Task UpdateGrid()
    {
        _auctionItems.Clear();
        await GetAuctionData();
    }

    private async Task GetAuctionData()
    {
        var auctionInfos = (await AuctionService.GetAuction(_auctionsFilter))?.Auctions;

        if (auctionInfos != null)
        {
            foreach (var auctionInfo in auctionInfos)
            {
                _auctionItems.Add(new AuctionItem
                {
                    Title = auctionInfo.JourneyInfo.CustomerCompany.Name + "'s Auction",
                    BidCount = auctionInfo.Bids?.Count() ?? 0,
                    FinalLocation = auctionInfo.JourneyInfo.Office.Address.Name,
                    Locations = auctionInfo.JourneyInfo.Stops?.Select(x => x.Address.Name).ToList(),
                    Price = auctionInfo.Amount,
                    AuctionId = auctionInfo.Id
                });
            }
        }
    }

    private class AuctionItem : AuctionInfo
    {
        public string Title { get; set; }
        public List<string>? Locations { get; set; }
        public string FinalLocation { get; set; }
        public decimal Price { get; set; }
        public int BidCount { get; set; }
        public long AuctionId{ get; set; }
    }
}